services:
  - type: web
    name: voter-verify
    runtime: node
    buildCommand: |
      npm install
      mkdir -p src/models
      echo "const mongoose = require('mongoose'); const bcrypt = require('bcryptjs'); const userSchema = new mongoose.Schema({ name: { type: String, required: true }, email: { type: String, required: true, unique: true }, password: { type: String, required: true }, adharNumber: { type: String }, phoneNumber: { type: String, required: true, unique: true }, voterId: { type: String, required: true, unique: true }, phoneNumberVerified: { type: Boolean, default: false }, faceEmbedding: { type: Array, required: false }, digitalToken: { type: String, unique: true, sparse: true }, timeSlot: { type: mongoose.Schema.Types.ObjectId, ref: 'TimeSlot', default: null }, isAdmin: { type: Boolean, default: false }, faceVerifiedAt: { type: Date, default: null }, tokenVerifiedAt: { type: Date, default: null } }, { timestamps: true }); userSchema.pre('save', async function(next) { if (!this.isModified('password')) { return next(); } try { const salt = await bcrypt.genSalt(10); this.password = await bcrypt.hash(this.password, salt); next(); } catch (error) { next(error); } }); const User = mongoose.models.User || mongoose.model('User', userSchema); module.exports = User;" > src/models/userModel.js
      echo "const mongoose = require('mongoose'); const timeSlotSchema = new mongoose.Schema({ date: { type: Date, required: true }, startTime: { type: String, required: true }, endTime: { type: String, required: true }, maxAppointments: { type: Number, default: 10 }, currentBookings: { type: Number, default: 0 } }, { timestamps: true }); const TimeSlot = mongoose.models.TimeSlot || mongoose.model('TimeSlot', timeSlotSchema); module.exports = TimeSlot;" > src/models/TimeSlot.js
      echo "const mongoose = require('mongoose'); const DigitalToken = mongoose.models.DigitalToken || mongoose.model('DigitalToken', new mongoose.Schema({ voterId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true, unique: true }, token: { type: String, required: true }, qrCode: { type: String, required: true }, pdfData: { type: String, required: true }, generatedAt: { type: Date, default: Date.now, required: true }, verifiedAt: { type: Date }, status: { type: String, enum: ['active', 'used', 'expired', 'revoked'], default: 'active' } }, { timestamps: true })); module.exports = DigitalToken;" > src/models/DigitalToken.js
      echo "const mongoose = require('mongoose'); const chatMessageSchema = new mongoose.Schema({ userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }, room: { type: String, required: true }, text: { type: String, required: true }, sender: { type: String, required: true } }, { timestamps: true }); const ChatMessage = mongoose.models.ChatMessage || mongoose.model('ChatMessage', chatMessageSchema); module.exports = ChatMessage;" > src/models/ChatMessage.js
      echo "const mongoose = require('mongoose'); const chatbotHistorySchema = new mongoose.Schema({ userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }, roomId: { type: String, required: true }, messages: [{ role: { type: String, enum: ['user', 'bot'], required: true }, content: { type: String, required: true }, timestamp: { type: Date, default: Date.now } }] }, { timestamps: true }); const ChatbotHistory = mongoose.models.ChatbotHistory || mongoose.model('ChatbotHistory', chatbotHistorySchema); module.exports = ChatbotHistory;" > src/models/chatbotModel.js
    startCommand: node server.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: MONGODB_URI
        value: mongodb+srv://pavan:pavan0204@cluster0.v6srr.mongodb.net/evoting?retryWrites=true&w=majority&appName=Cluster0
      - key: JWT_SECRET
        value: a95a996b6508abb29bfd9e47c0a4b4033aa7baae4a35ecce1aed4e90456ddde3bb771abbb1168501bd351ffbe40edfac5f9bc142556fa5f3929e3691b420cab3d595c84c2fa352f851692b825235c127a24a7b4212cc635b76186001e7f3c7f6cd09bc45e9b0a8ed775b7510ba5d1cc79e0091d26ffbd4d2975e3ca96fbfbf2b51f2fe26874a97e23394599791bf6378ca0189e47e67fe3a42342f08d27d7c87df80d742ba81defa4d2924d3e936b5df45b44f8509bc91dc8758e318e785b222c16f09a0ed7ca1ee10f962a4e829e1c8db9ac1e0f5b812c6b8ac78d290bc6c761b155b456e497d77ee21e1898e7074228192b9634029bb2494d2cde3d0ac9fb7
      - key: CLOUDINARY_CLOUD_NAME
        value: dcf9vnx82
      - key: CLOUDINARY_API_KEY
        value: 761122166556153
      - key: CLOUDINARY_API_SECRET
        value: n8CGGUMSpjjKKq-HNeeE-tVP214 